import javax.swing.*;
import java.io.*;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Enumeration;

public class MySocket {
    private static BufferedReader in;    // Verpackung des Socket-Eingabestroms.
    private static Writer out;

    //Nach Initialisierung - für beide Client und Server Socket
    public void running(Socket socket_in) {


        System.out.println("Connection established.");

        // Ein- und Ausgabestrom des Sockets ermitteln
        // und als BufferedReader bzw. Writer verpacken.
        in = new BufferedReader(new InputStreamReader(socket_in.getInputStream()));
        out = new OutputStreamWriter(socket_in.getOutputStream());

        // Graphische Oberfläche aufbauen.
        SwingUtilities.invokeLater(
                () -> {
                    startGui();
                }
        );

        // Netzwerknachrichten lesen und verarbeiten.

        while (true) {
            String line = in.readLine();
            if (line == null) break;
            SwingUtilities.invokeLater(
                    () -> {
                        button.setEnabled(true);
                    }
            );
        }

        // shutdown des Sockets
        socket_in.shutdownOutput();
        System.out.println("Connection closed.");
        System.exit(0);
    }


    public void hostClient(String IP) {


    }

    public void hostServer() throws IOException {

        final int port = 50000;

        Socket socket;

        // Die eigene(n) IP-Adresse(n) ausgeben,
        // damit der Benutzer sie dem Benutzer des Clients mitteilen kann.
        System.out.print("Connect to:");
        Enumeration<NetworkInterface> nis = NetworkInterface.getNetworkInterfaces();

        while (nis.hasMoreElements()) {
            NetworkInterface ni = nis.nextElement();
            Enumeration<InetAddress> ias = ni.getInetAddresses();
            while (ias.hasMoreElements()) {
                InetAddress ia = ias.nextElement();
                if (!ia.isLoopbackAddress()) {
                    System.out.print(" " + ia.getHostAddress());
                }
            }
        }


        System.out.println();
        System.out.println("Waiting for client connection ...");

        ServerSocket ss = new ServerSocket(port);
        socket = ss.accept();


    }

}
